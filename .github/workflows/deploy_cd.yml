name: Deploy to Azure VM

on:
  workflow_run:
    workflows: ['Testing and building docker image']
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Process compose file
        run: |
          # Replace GitHub Actions variables with actual values
          sed -i "s|\${{ secrets.ACR_LOGIN_SERVER }}|${{ secrets.ACR_LOGIN_SERVER }}|g" compose.yml

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_IP }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to Azure VM
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_IP }}
        run: |
          scp -i ~/.ssh/id_rsa compose.yml $SSH_USER@$SSH_HOST:~/
          scp -i ~/.ssh/id_rsa Dockerfile.nginx $SSH_USER@$SSH_HOST:~/
          scp -i ~/.ssh/id_rsa nginx.conf $SSH_USER@$SSH_HOST:~/

          # Copy .env file if it exists
          if [ -f .env ]; then
            scp -i ~/.ssh/id_rsa .env $SSH_USER@$SSH_HOST:~/
          fi

      - name: Login to Azure Container Registry on VM and Deploy
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_IP }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        run: |
          ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'EOF'
            # Login to Azure Container Registry
            echo "${{ secrets.ACR_PASSWORD }}" | sudo docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
            
            # Pull latest images
            echo "📥 Pulling latest images..."
            sudo docker compose pull
            
            # Graceful update
            echo "🔄 Starting graceful update..."
            
            # Update node service with zero downtime
            sudo docker compose up -d --no-deps node
            
            # Wait for health check
            echo "⏳ Waiting for services to be healthy..."
            sleep 30
            
            # Check if services are healthy
            if sudo docker compose ps | grep -q "Up (healthy)"; then
              echo "✅ Services are healthy"
            else
              echo "⚠️ Services may not be fully healthy yet"
              sudo docker compose ps
            fi
            
            # Cleanup old images
            echo "🧹 Cleaning up..."
            sudo docker image prune -f
            
            echo "🎉 Deployment completed successfully!"
            
            # Show final status
            sudo docker compose ps
          EOF
